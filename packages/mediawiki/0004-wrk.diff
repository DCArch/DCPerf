# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.
diff --git a/src/ae.c b/src/ae.c
index e66808a..d6af6c0 100644
--- a/src/ae.c
+++ b/src/ae.c
@@ -75,6 +75,8 @@ aeEventLoop *aeCreateEventLoop(int setsize) {
     eventLoop->stop = 0;
     eventLoop->maxfd = -1;
     eventLoop->beforesleep = NULL;
+    eventLoop->checkThreadStop = NULL;
+    eventLoop->checkThreadStopData = NULL;
     if (aeApiCreate(eventLoop) == -1) goto err;
     /* Events with mask == AE_NONE are not set. So let's initialize the
      * vector with it. */
@@ -416,6 +418,13 @@ int aeProcessEvents(aeEventLoop *eventLoop, int flags)
                     fe->wfileProc(eventLoop,fd,fe->clientData,mask);
             }
             processed++;
+
+            if (eventLoop->checkThreadStop != NULL) {
+                if (eventLoop->checkThreadStop(eventLoop) == 1) {
+                    eventLoop->stop = 1;
+                    break;
+                }
+            }
         }
     }
     /* Check time events */
@@ -463,3 +472,9 @@ char *aeGetApiName(void) {
 void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep) {
     eventLoop->beforesleep = beforesleep;
 }
+
+void aeSetCheckThreadStopProc(aeEventLoop *eventLoop,
+        aeCheckThreadStopProc *checkThreadStop, void *checkData) {
+    eventLoop->checkThreadStop = checkThreadStop;
+    eventLoop->checkThreadStopData = checkData;
+}
diff --git a/src/ae.h b/src/ae.h
index 827c4c9..eb51467 100644
--- a/src/ae.h
+++ b/src/ae.h
@@ -60,6 +60,7 @@ typedef void aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData,
 typedef int aeTimeProc(struct aeEventLoop *eventLoop, long long id, void *clientData);
 typedef void aeEventFinalizerProc(struct aeEventLoop *eventLoop, void *clientData);
 typedef void aeBeforeSleepProc(struct aeEventLoop *eventLoop);
+typedef int aeCheckThreadStopProc(struct aeEventLoop *eventLoop);

 /* File event structure */
 typedef struct aeFileEvent {
@@ -98,6 +99,8 @@ typedef struct aeEventLoop {
     int stop;
     void *apidata; /* This is used for polling API specific data */
     aeBeforeSleepProc *beforesleep;
+    aeCheckThreadStopProc *checkThreadStop;
+    void *checkThreadStopData;
 } aeEventLoop;

 /* Prototypes */
@@ -119,5 +122,7 @@ char *aeGetApiName(void);
 void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep);
 int aeGetSetSize(aeEventLoop *eventLoop);
 int aeResizeSetSize(aeEventLoop *eventLoop, int setsize);
+void aeSetCheckThreadStopProc(aeEventLoop *eventLoop,
+        aeCheckThreadStopProc *checkThreadStop, void *checkData);

 #endif
diff --git a/src/net.c b/src/net.c
index 75916f7..5fa0a5d 100644
--- a/src/net.c
+++ b/src/net.c
@@ -11,12 +11,16 @@ status sock_connect(connection *c, char *host) {
 }

 status sock_close(connection *c) {
+    close(c->fd);
     return OK;
 }

 status sock_read(connection *c, size_t *n) {
     ssize_t r = read(c->fd, c->buf, sizeof(c->buf));
     *n = (size_t) r;
+    if (r < 0) {
+	    printf("sock_read got error %d.\n", errno);
+    }
     return r >= 0 ? OK : ERROR;
 }

diff --git a/src/wrk.c b/src/wrk.c
index 51f46f7..be1467b 100644
--- a/src/wrk.c
+++ b/src/wrk.c
@@ -8,6 +8,7 @@ static struct config {
     uint64_t connections;
     uint64_t duration;
     uint64_t threads;
+    uint64_t requests;
     uint64_t timeout;
     uint64_t pipeline;
     bool     delay;
@@ -41,12 +42,20 @@ static void handler(int sig) {
     stop = 1;
 }

+static int aeCheckThreadStop(struct aeEventLoop *eventLoop) {
+    thread *t = (thread *)eventLoop->checkThreadStopData;
+    if (t->complete == t->complete_stop)
+        return 1;
+    return 0;
+}
+
 static void usage() {
     printf("Usage: wrk <options> <url>                            \n"
            "  Options:                                            \n"
            "    -c, --connections <N>  Connections to keep open   \n"
            "    -d, --duration    <T>  Duration of test           \n"
            "    -t, --threads     <N>  Number of threads to use   \n"
+           "    -r, --requests    <N>  Number of requests to limit\n"
            "                                                      \n"
            "    -s, --script      <S>  Load Lua script file       \n"
            "    -H, --header      <H>  Add header to request      \n"
@@ -102,13 +111,26 @@ int main(int argc, char **argv) {
     cfg.host = host;

     for (uint64_t i = 0; i < cfg.threads; i++) {
-        thread *t      = &threads[i];
-        t->loop        = aeCreateEventLoop(10 + cfg.connections * 3);
+        thread *t = &threads[i];
+        t->loop = aeCreateEventLoop(10 + cfg.connections * 3);
+        if (t->loop == NULL) {
+            char *msg = strerror(errno);
+            fprintf(stderr, "unable to create ae eventloop: %s\n", msg);
+            exit(2);
+        }
+
         t->connections = cfg.connections / cfg.threads;

         t->L = script_create(cfg.script, url, headers);
         script_init(L, t, argc - optind, &argv[optind]);

+        if (cfg.requests > 0) {
+            t->complete_stop = cfg.requests / cfg.threads;
+            if (i == (cfg.threads - 1))
+                t->complete_stop += (cfg.requests % cfg.threads);
+            aeSetCheckThreadStopProc(t->loop, aeCheckThreadStop, (void *)t);
+        }
+
         if (i == 0) {
             cfg.pipeline = script_verify_request(t->L);
             cfg.dynamic  = !script_is_static(t->L);
@@ -120,7 +142,7 @@ int main(int argc, char **argv) {
             }
         }

-        if (!t->loop || pthread_create(&t->thread, NULL, &thread_main, t)) {
+        if (pthread_create(&t->thread, NULL, &thread_main, t)) {
             char *msg = strerror(errno);
             fprintf(stderr, "unable to create thread %"PRIu64": %s\n", i, msg);
             exit(2);
@@ -143,8 +165,10 @@ int main(int argc, char **argv) {
     uint64_t bytes    = 0;
     errors errors     = { 0 };

-    sleep(cfg.duration);
-    stop = 1;
+    if (cfg.duration > 0) {
+        sleep(cfg.duration);
+        stop = 1;
+    }

     for (uint64_t i = 0; i < cfg.threads; i++) {
         thread *t = &threads[i];
@@ -236,7 +260,7 @@ void *thread_main(void *arg) {
 static int connect_socket(thread *thread, connection *c) {
     struct addrinfo *addr = thread->addr;
     struct aeEventLoop *loop = thread->loop;
-    int fd, flags;
+    int fd, flags, ret;

     fd = socket(addr->ai_family, addr->ai_socktype, addr->ai_protocol);

@@ -248,7 +272,16 @@ static int connect_socket(thread *thread, connection *c) {
     }

     flags = 1;
-    setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, &flags, sizeof(flags));
+    ret = setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, &flags, sizeof(flags));
+    if (ret != 0) {
+        printf("Error setsockopt(fd, IPPROTO_TCP, TCP_NODELAY): %d\n", errno);
+        goto error;
+    }
+    ret = setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &flags, sizeof(flags));
+    if (ret != 0) {
+        printf("Error setsockopt:(fd, SOL_SOCKET, SO_KEEPALIVE): %d\n", errno);
+        goto error;
+    }

     flags = AE_READABLE | AE_WRITABLE;
     if (aeCreateFileEvent(loop, fd, flags, socket_connected, c) == AE_OK) {
@@ -470,6 +503,7 @@ static struct option longopts[] = {
     { "connections", required_argument, NULL, 'c' },
     { "duration",    required_argument, NULL, 'd' },
     { "threads",     required_argument, NULL, 't' },
+    { "requests",    required_argument, NULL, 'r' },
     { "script",      required_argument, NULL, 's' },
     { "header",      required_argument, NULL, 'H' },
     { "latency",     no_argument,       NULL, 'L' },
@@ -486,10 +520,11 @@ static int parse_args(struct config *cfg, char **url, struct http_parser_url *pa
     memset(cfg, 0, sizeof(struct config));
     cfg->threads     = 2;
     cfg->connections = 10;
+    cfg->requests    = 0;
     cfg->duration    = 10;
     cfg->timeout     = SOCKET_TIMEOUT_MS;

-    while ((c = getopt_long(argc, argv, "t:c:d:s:H:T:Lrv?", longopts, NULL)) != -1) {
+    while ((c = getopt_long(argc, argv, "t:c:r:d:s:H:T:Lrv?", longopts, NULL)) != -1) {
         switch (c) {
             case 't':
                 if (scan_metric(optarg, &cfg->threads)) return -1;
@@ -497,6 +532,9 @@ static int parse_args(struct config *cfg, char **url, struct http_parser_url *pa
             case 'c':
                 if (scan_metric(optarg, &cfg->connections)) return -1;
                 break;
+            case 'r':
+                if (scan_metric(optarg, &cfg->requests)) return -1;
+                break;
             case 'd':
                 if (scan_time(optarg, &cfg->duration)) return -1;
                 break;
@@ -537,6 +575,12 @@ static int parse_args(struct config *cfg, char **url, struct http_parser_url *pa
         return -1;
     }

+    if (cfg->requests > 0)
+        cfg->duration = 0;
+
+    if (cfg->requests > 0 && cfg->requests < cfg->threads)
+        cfg->threads = cfg->requests;
+
     *url    = argv[optind];
     *header = NULL;

diff --git a/src/wrk.h b/src/wrk.h
index 2d0ac84..0aa9aa0 100644
--- a/src/wrk.h
+++ b/src/wrk.h
@@ -36,6 +36,7 @@ typedef struct {
     lua_State *L;
     errors errors;
     struct connection *cs;
+    uint64_t complete_stop;
 } thread;

 typedef struct {
